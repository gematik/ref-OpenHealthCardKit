//
//  Copyright (c) 2023 gematik GmbH
//
//  Licensed under the Apache License, Version 2.0 (the License);
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an 'AS IS' BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

import CardReaderProviderApi
@testable import HealthCardControl
import Nimble
import XCTest

final class AES128PaceKeyTest: XCTestCase {
    func testPaceKey_init() {
        let enc = Data([0x0, 0x01, 0x02, 0x3])
        let mac = Data([0x03, 0x02, 0x01, 0x0])
        let paceKey = AES128PaceKey(enc: enc, mac: mac)

        expect {
            paceKey.mac
        } == mac
    }

    // swiftlint:disable force_try line_length

    private func setupPaceKey() -> AES128PaceKey {
        let keyEnc = try! Data(hex: "68406B4162100563D9C901A6154D2901")
        let keyMac = try! Data(hex: "73FF268784F72AF833FDC9464049AFC9")
        return AES128PaceKey(enc: keyEnc, mac: keyMac)
    }

    func testEncryptChained() { // swiftlint:disable:this function_body_length
        let paceKey = setupPaceKey()

        //
        // test Case 1 : |CLA|INS|P1|P2|
        //
        let command1 = try! APDU.Command(cla: 0x0, ins: 0x84, p1: 0x0, p2: 0x0)
        let expected1 = try! Data(hex: "0C8400000A8E08F146CA58D9D8796200")
        expect {
            try paceKey.encrypt(command: command1).bytes
        } == expected1

        //
        // test Case 2s : |CLA|INS|P1|P2|LE|
        //
        let command2 = try! APDU.Command(cla: 0x0, ins: 0x84, p1: 0x0, p2: 0x0, ne: 8)
        let expected2 = try! Data(hex: "0C84000000000D9701088E081DC3357110820CAD0000")
        expect {
            try paceKey.encrypt(command: command2).bytes
        } == expected2

        //
        // test Case 2e : |CLA|INS|P1|P2|EXTLE|
        //
        let command21 = try! APDU.Command(cla: 0x0, ins: 0x84, p1: 0x0, p2: 0x0, ne: 0x1111)
        let expected21 = try! Data(hex: "0C84000000000E970211118E08EEF70779FD0263D60000")
        expect {
            try paceKey.encrypt(command: command21).bytes
        } == expected21

        //
        // test Case 3s : |CLA|INS|P1|P2|LC|DATA|
        //
        let data3 = try! Data(hex: "830D44454356434141543030303031")
        let command3 = try! APDU.Command(cla: 0x0, ins: 0x22, p1: 0x81, p2: 0xB6, data: data3)
        let expected3 = try! Data(hex: "0C2281B61D871101BEE6E33D7D2F6D8662ED4CF56739794C8E0808FEA4E3EEEC972000")
        expect {
            try paceKey.encrypt(command: command3).bytes
        } == expected3

        //
        // test Case 3e : |CLA|INS|P1|P2|EXTLC|DATA|
        //
        let data31 =
            try! Data(
                hex
            )
        let command31 = try! APDU.Command(cla: 0x0, ins: 0x2A, p1: 0x00, p2: 0xBE, data: data31)
        let expected31 =
            try! Data(
                hex: "0C2A00BE0001CF878201C1014A82C32F941900EE386FBE1E2C8927AE46DE58AD5FB70CF24829052D19E6D4A234E350BC6027EF199865BD02A3FFD625099960F708FE276F0592EB440CB03382DE424687313B1D0973302881C5081C7272AE8A38643834C90CB3363983CCE122FFDFE5A4F04B9F7149F94E96BAF8D3355387A8BADC90272B91E0DC404D473C864D7B97CD3C0CA3358E4375A9D73E889044801584AB76DABF817C68ABE788AE4F31DBA5F44B617B1840985DDF4E897C9295DF88E7475BDF09D16497A55477FD6D7FE1009284ACDF6A4921F4745456663CFF625082793755F56DB32E1BD9D9CEFE3DC492F8437A5E31027E388D2B518249D3A58C7D3FFAA3BE0EAED58F0311783F688F33A4C206F394127CEE0056FF35D285D45AB2E995AD36991007C9FB5A3E7154E4750956F106C0974D04888EFEE9290307D962DFB8EA9E58ECECF9EE2F10B34E6254E2EB1CC7013814E8F1BDA7C93FD1AC1FAB6110EBA1156C9E6DBEEB0DE951C5A325E546ED874791489A63774A783BF1F42333326D3F1ADF4350534DA588BDAE4738CBF7FDB3B7EAFC33E4E75DFC3C19C7C758E72930B203A319BFCC4144FCAF266541E1626433679ACA0C665DF7A5ACC1348B0BACB2AD7D2D34B8AA4ED48E0875AA2DE9BC7546DE0000"
            )
        expect {
            try paceKey.encrypt(command: command31).bytes
        } == expected31

        //
        // test Case 4s : |CLA|INS|P1|P2|LC|DATA|LE|
        //
        let data4 = try! Data(hex: "830D44454356434141543030303031")
        let command4 = try! APDU.Command(cla: 0x0, ins: 0x22, p1: 0x81, p2: 0xB6, data: data4, ne: 8)
        let expected4 =
            try! Data(hex: "0C2281B6000020871101B86BC36EBADED003068B831CC70D8E0E9701088E08972AE4B01DB329930000")
        expect {
            try paceKey.encrypt(command: command4).bytes
        } == expected4

        //
        // test Case 4e.1 : |CLA|INS|P1|P2|EXTLC|DATA|LE|
        //
        let data41 =
            try! Data(
                hex
            )
        let command41 = try! APDU.Command(cla: 0x0, ins: 0x2A, p1: 0x0, p2: 0xBE, data: data41, ne: 8)
        let expected41 =
            try! Data(
                hex: "0C2A00BE0001D2878201C1010B75D6845C75ABA7E3770F1AA257ACA627903624AE9000368B4FD57E7F8E512CE0B39DF79E7E9C22952ABC84F63B3F4EF051FACC973DACD075523CFEBA70A21305846D5D579B33BBC02B1B1BE9D951288D80B05A8B837FBE3B99F948918609C4DB0A36E92E03933FBABDDE2D839DF1AD12EB95AA662B4C6AAE777FB3FFB5ADEEE60AA3A0E0864E5C559DE6B135AE4F420B0B9B320B2BF74C76F11494746A6470306156E36487E2A5EA8CE128EBAB5FBB7F1644A122A919524E514D9D186E854F1396898D8984E2B46542A3C89E2A77A1867E15762EA90A2A5BDE30F766CF7AF869289A8E9C1E84A8DBB6925C7C15ABE088745E1CCAE17E56B603AB0D10E4E26391B6DC5282984DBBA9DC3747FC0566C7ECF06D5CC2958D6BB910594C372EE5256F8DD07CCBB35026A3C7428AEEDF5CC3F826B45500071D664B32095958EA0E919964F029195C99A967B5A53C152EE0CBBBEC4387A41240070C175AE177AEE2606F7AAE52DAB9AF73D429575F6B3247BE3CF25D88B19196561259A2E7DA95132F7C4197CAEEAD7A2AB168934F594D9ACAB0C6BF1486777CDC3251CA24BD5E56440EB2CC52A39ED02D70F6BD958FECDD2D2D1F3D1CA2A67544853DBF0E03ED65919701088E086CEF1AC15F6309E90000"
            )
        expect {
            try paceKey.encrypt(command: command41).bytes
        } == expected41

        //
        // Case 4e.2 : |CLA|INS|P1|P2|LC|DATA|EXTLE|
        //
        let data42 = try! Data(hex: "830D44454356434141543030303031")
        let command42 = try! APDU.Command(cla: 0x0, ins: 0x22, p1: 0x81, p2: 0xB6, data: data42, ne: 0x1111)
        let expected42 =
            try! Data(hex: "0C2281B60000218711011E52F828C7DE2F1F27EEEB5838065F4D970211118E08F9FD84145B179F100000")
        expect {
            try paceKey.encrypt(command: command42).bytes
        } == expected42

        //
        // test Case 4e.3: |CLA|INS|P1|P2|EXTLC|DATA|EXTLE|
        //
        let data43 =
            try! Data(
                hex
            )
        let command43 = try! APDU.Command(cla: 0x0, ins: 0x2A, p1: 0x0, p2: 0xBE, data: data43, ne: 0x1111)
        let expected43 =
            try! Data(
                hex
            )
        expect {
            try paceKey.encrypt(command: command43).bytes
        } == expected43
    }

    // test Case 1 : |CLA|INS|P1|P2|
    func testEncryptCase1() {
        let paceKey = setupPaceKey()
        let command1 = try! APDU.Command(cla: 0x0, ins: 0x84, p1: 0x0, p2: 0x0)
        let expected1 = try! Data(hex: "0C8400000A8E08F146CA58D9D8796200")
        expect {
            try paceKey.encrypt(command: command1).bytes
        } == expected1
    }

    // test Case 2s: |CLA|INS|P1|P2|LE|
    func testEncryptCase2s() {
        let paceKey = setupPaceKey()
        let command2s = try! APDU.Command(cla: 0x1, ins: 0x2, p1: 0x3, p2: 0x4, ne: 127)
        let expected2s = try! Data(hex: "0D02030400000D97017F8E0871D8E0418DAE20F30000")
        expect {
            try paceKey.encrypt(command: command2s).bytes
        } == expected2s
    }

    // test Case 4e: |CLA|INS|P1|P2|EXTLC|DATA|LE|
    func testEncryptCase4e() {
        let paceKey = setupPaceKey()
        let data4e = Data(repeating: 0x0, count: 256)
        let command4e = try! APDU.Command(cla: 0x1, ins: 0x2, p1: 0x3, p2: 0x4, data: data4e, ne: 127)
        let expected4e =
            try! Data(
                hex: "0D02030400012287820111013297D4AA774AB26AF8AD539C0A829BCA4D222D3EE2DB100CF86D7DB5A1FAC12B7623328DEFE3F6FDD41A993AC917BC17B364C3DD24740079DE60A3D0231A7185D36A77D37E147025913ADA00CD07736CFDE0DB2E0BB09B75C5773607E54A9D84181ACBC6F7726762A8BCE324C0B330548114154A13EDDBFF6DCBC3773DCA9A8494404BE4A5654273F9C2B9EBE1BD615CB39FFD0D3F2A0EEA29AA10B810D53EDB550FB741A68CC6B0BDF928F9EB6BC238416AACB4CF3002E865D486CF42D762C86EEBE6A2B25DECE2E88D569854A07D3F146BC134BAF08B6EDCBEBDFF47EBA6AC7B441A1642B03253B588C49B69ABBEC92BA1723B7260DE8AD6158873141AFA7C70CFCF125BA1DF77CA48025D049FCEE497017F8E0856332C83EABDF93C0000"
            )

        expect {
            try paceKey.encrypt(command: command4e).bytes
        } == expected4e
    }

    func testDecryption() {
        let paceKey = setupPaceKey()

        let response1 = try! APDU.Response(apdu: Data(hex: "990290008E0812503AC2A74CC4639000"))
        let expected1 = try! Data(hex: "9000")

        expect {
            try paceKey.decrypt(response: response1).bytes
        } == expected1
    }

    // Test that the decryption function can distinguish between encrypted protectedData and just signed protectedData
    // gemSpec_COS#10.2_N022.810
    func testVerificationOnly() throws {
        let keyEnc = try Data(hex: "DDE8F17E434F62CE478A08606D5937D9")
        let keyMac = try Data(hex: "E71EF95A22DF36F1624A8F70D886BE58")
        let key = AES128PaceKey(enc: keyEnc, mac: keyMac)

        key.secureMessagingSsc = Data([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6])
        let responseDo81 = try APDU
            .Response(
                apdu: Data(
                    hex
                )
            )
        let expectedResponse =
            try Data(
                hex
            )
        expect {
            try key.decrypt(response: responseDo81).bytes
        } == expectedResponse
    }

    // test Case 1: DO99|DO8E|SW1SW2
    func testDecryptDo99Apdu() {
        let paceKey = setupPaceKey()
        paceKey.secureMessagingSsc = AES128PaceKey.incrementSsc(ssc: paceKey.secureMessagingSsc)
        let responseDo99 = try! APDU.Response(apdu: Data(hex: "990290008E08087631D746F872729000"))
        let expectedDo99 = try! Data(hex: "9000")

        expect {
            try paceKey.decrypt(response: responseDo99).bytes
        } == expectedDo99
    }

    // test Case 2: DO87|DO99|DO8E|SW1SW2
    func testDecryptDo87Apdu() {
        let paceKey = setupPaceKey()
        paceKey.secureMessagingSsc = AES128PaceKey.incrementSsc(ssc: paceKey.secureMessagingSsc)
        let responseDo87 = try! APDU
            .Response(apdu: Data(hex: "871101496c26d36306679609665a385c54db37990290008E08B7E9ED2A0C89FB3A9000"))
        let expectedDo87 = try! Data(hex: "05060708090a9000")
        expect {
            try paceKey.decrypt(response: responseDo87).bytes
        } == expectedDo87
    }

    func testDecryptMalformedResponse() {
        let paceKey = setupPaceKey()
        paceKey.secureMessagingSsc = AES128PaceKey.incrementSsc(ssc: paceKey.secureMessagingSsc)
        // missing DO99
        let responseMissingDo99 = try! APDU.Response(apdu: Data(hex: "8E0812503AC2A74CC4639000"))
        expect {
            try paceKey.decrypt(response: responseMissingDo99)
        }.to(throwError(AES128PaceKey.Error.encryptedResponseMalformed))

        // missing DO8E
        let responseMissingDo8e = try! APDU
            .Response(apdu: Data(hex: "871101496c26d36306679609665a385c54db37990290009000"))
        expect {
            try paceKey.decrypt(response: responseMissingDo8e)
        }.to(throwError(AES128PaceKey.Error.encryptedResponseMalformed))

        // missing status
        let responseMissingStatus = try! APDU
            .Response(apdu: Data(hex: "871101496c26d36306679609665a385c54db37990290008E08B7E9ED2A0C89FB3A"))
        expect {
            try paceKey.decrypt(response: responseMissingStatus)
        }.to(throwError(AES128PaceKey.Error.encryptedResponseMalformed))

        // wrong mac
        let responseInvalidMac = try! APDU
            .Response(apdu: Data(hex: "871101496c26d36306679609665a385c54db37990290008E0812503AC2A74CC4639000"))
        expect {
            try paceKey.decrypt(response: responseInvalidMac)
        }.to(throwError(AES128PaceKey.Error.secureMessagingMacVerificationFailed))
    }

    func testIncrementSsc() {
        expect {
            AES128PaceKey.incrementSsc(ssc: Data([0x0, 0x0, 0x0, 0x1]))
        } == Data([0x0, 0x0, 0x0, 0x2])

        expect {
            AES128PaceKey.incrementSsc(ssc: Data([0x0, 0x0, 0x1, 0xFF]))
        } == Data([0x0, 0x0, 0x2, 0x00])
    }

    static let allTests = [
        ("testPaceKey_init", testPaceKey_init),
        ("testEncryptChained", testEncryptChained),
        ("testEncryptCase1", testEncryptCase1),
        ("testEncryptCase2s", testEncryptCase2s),
        ("testDecryptDo99Apdu", testDecryptDo99Apdu),
        ("testDecryptDo87Apdu", testDecryptDo87Apdu),
        ("testDecryptMalformedResponse", testDecryptMalformedResponse),
        ("testIncrementSsc", testIncrementSsc),
    ]
}
