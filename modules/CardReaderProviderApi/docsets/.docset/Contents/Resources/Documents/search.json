{"Typealiases.html#/ATR":{"name":"ATR","abstract":"<p>Answer-to-reset is of Type Data</p>"},"Structs/InvalidCommandChannel.html#/channelNo":{"name":"channelNo","abstract":"<p>The invalid channel number</p>","parent_name":"InvalidCommandChannel"},"Structs/CardProtocol.html#/rawValue":{"name":"rawValue","abstract":"<p>Bitmask encoded protocols</p>","parent_name":"CardProtocol"},"Structs/CardProtocol.html#/init(rawValue:)":{"name":"init(rawValue:)","parent_name":"CardProtocol"},"Structs/CardProtocol.html#/t0":{"name":"t0","abstract":"<p>T=0 protocol</p>","parent_name":"CardProtocol"},"Structs/CardProtocol.html#/t1":{"name":"t1","abstract":"<p>T=1 protocol</p>","parent_name":"CardProtocol"},"Structs/CardProtocol.html#/t15":{"name":"t15","abstract":"<p>T=15 protocol</p>","parent_name":"CardProtocol"},"Structs/CardProtocol.html#/any":{"name":"any","abstract":"<p>T=* protocol</p>","parent_name":"CardProtocol"},"Structs/CardProtocol.html":{"name":"CardProtocol","abstract":"<p>SmartCard comms protocol representation</p>"},"Structs/InvalidCommandChannel.html":{"name":"InvalidCommandChannel","abstract":"<p>Error when an invalid channel number is chosen</p>"},"Protocols/CardReaderType.html#/name":{"name":"name","abstract":"<p>CardReader name</p>","parent_name":"CardReaderType"},"Protocols/CardReaderType.html#/displayName":{"name":"displayName","abstract":"<p>Returns the system displayable name of this reader.</p>","parent_name":"CardReaderType"},"Protocols/CardReaderType.html#/cardPresent":{"name":"cardPresent","abstract":"<p>Whether there is a SmartCard present (mute or not) at the time of reading the property</p>","parent_name":"CardReaderType"},"Protocols/CardReaderType.html#/onCardPresenceChanged(_:)":{"name":"onCardPresenceChanged(_:)","abstract":"<p>Add an execution block for when a card is presented</p>","parent_name":"CardReaderType"},"Protocols/CardReaderType.html#/connect(_:)":{"name":"connect(_:)","abstract":"<p>Connect to the currently present SmartCard.</p>","parent_name":"CardReaderType"},"Protocols/CardReaderControllerType.html#/name":{"name":"name","abstract":"<p>The identifier name for the controller</p>","parent_name":"CardReaderControllerType"},"Protocols/CardReaderControllerType.html#/cardReaders":{"name":"cardReaders","abstract":"<p>The currently available card readers</p>","parent_name":"CardReaderControllerType"},"Protocols/CardReaderControllerType.html#/add(delegate:)":{"name":"add(delegate:)","abstract":"<p>Add a delegate to get informed when the cardReaders array changes.</p>","parent_name":"CardReaderControllerType"},"Protocols/CardReaderControllerType.html#/remove(delegate:)":{"name":"remove(delegate:)","abstract":"<p>Remove a previously added delegate.</p>","parent_name":"CardReaderControllerType"},"Protocols/CardReaderControllerDelegate.html#/cardReader(controller:didConnect:)":{"name":"cardReader(controller:didConnect:)","abstract":"<p>Inform the delegate of a (new) connected/available <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/CardReaderType.html\">CardReaderType</a></code>.</p>","parent_name":"CardReaderControllerDelegate"},"Protocols/CardReaderControllerDelegate.html#/cardReader(controller:didDisconnect:)":{"name":"cardReader(controller:didDisconnect:)","abstract":"<p>Inform the delegate of a card reader disconnect.</p>","parent_name":"CardReaderControllerDelegate"},"Protocols/CardReaderProviderType.html#/provideCardReaderController()":{"name":"provideCardReaderController()","abstract":"<p>Tell the provider to load and initialize the CardReaderController</p>","parent_name":"CardReaderProviderType"},"Protocols/CardReaderProviderType.html#/descriptor":{"name":"descriptor","abstract":"<p>Card Reader Provider information</p>","parent_name":"CardReaderProviderType"},"Protocols/ProviderDescriptorType.html#/name":{"name":"name","abstract":"<p>Provider (displayable) commercial name</p>","parent_name":"ProviderDescriptorType"},"Protocols/ProviderDescriptorType.html#/license":{"name":"license","abstract":"<p>License</p>","parent_name":"ProviderDescriptorType"},"Protocols/ProviderDescriptorType.html#/providerDescription":{"name":"providerDescription","abstract":"<p>Provider and/or card reader description</p>","parent_name":"ProviderDescriptorType"},"Protocols/ProviderDescriptorType.html#/shortDescription":{"name":"shortDescription","abstract":"<p>Short description</p>","parent_name":"ProviderDescriptorType"},"Protocols/ProviderDescriptorType.html#/providerClassName":{"name":"providerClassName","abstract":"<p>Principle className for communication with the (hardware) card reader</p>","parent_name":"ProviderDescriptorType"},"Protocols/ResponseType.html#/data":{"name":"data","abstract":"<p>Returns bytes in the response body. If this APDU has no body, this method returns nil</p>","parent_name":"ResponseType"},"Protocols/ResponseType.html#/nr":{"name":"nr","abstract":"<p>Returns the number of data bytes in the response body (Nr) or 0 if this APDU has no body.","parent_name":"ResponseType"},"Protocols/ResponseType.html#/sw1":{"name":"sw1","abstract":"<p>Returns the value of the status byte SW1 as a value between 0 and 255.</p>","parent_name":"ResponseType"},"Protocols/ResponseType.html#/sw2":{"name":"sw2","abstract":"<p>Returns the value of the status byte SW2 as a value between 0 and 255.</p>","parent_name":"ResponseType"},"Protocols/ResponseType.html#/sw":{"name":"sw","abstract":"<p>Returns the value of the status bytes SW1 and SW2 as a single status word SW.</p>","parent_name":"ResponseType"},"Protocols/CommandType.html#/data":{"name":"data","abstract":"<p>Returns bytes in the command body. If this APDU has no body, this property should return nil</p>","parent_name":"CommandType"},"Protocols/CommandType.html#/ne":{"name":"ne","abstract":"<p>Returns the maximum number of expected data bytes in a response APDU (Ne/Le).","parent_name":"CommandType"},"Protocols/CommandType.html#/nc":{"name":"nc","abstract":"<p>Returns the number of data bytes in the command body (Nc) or 0 if this APDU has no body.","parent_name":"CommandType"},"Protocols/CommandType.html#/cla":{"name":"cla","abstract":"<p>Returns the value of the class byte CLA.</p>","parent_name":"CommandType"},"Protocols/CommandType.html#/ins":{"name":"ins","abstract":"<p>Returns the value of the instruction byte INS.</p>","parent_name":"CommandType"},"Protocols/CommandType.html#/p1":{"name":"p1","abstract":"<p>Returns the value of the parameter byte P1.</p>","parent_name":"CommandType"},"Protocols/CommandType.html#/p2":{"name":"p2","abstract":"<p>Returns the value of the parameter byte P2.</p>","parent_name":"CommandType"},"Protocols/CommandType.html#/bytes":{"name":"bytes","abstract":"<p>Serialized APDU message</p>","parent_name":"CommandType"},"Protocols/CommandType.html#/toLogicalChannel(channelNo:)":{"name":"toLogicalChannel(channelNo:)","abstract":"<p>Convert a Command to be send on a given channel No</p>","parent_name":"CommandType"},"Protocols/CardType.html#/atr":{"name":"atr","abstract":"<p>Card Answer-to-reset configuration</p>","parent_name":"CardType"},"Protocols/CardType.html#/protocol":{"name":"protocol","abstract":"<p>Card supported protocol(s)</p>","parent_name":"CardType"},"Protocols/CardType.html#/openBasicChannel()":{"name":"openBasicChannel()","abstract":"<p>Open a communication channel to the Card.</p>","parent_name":"CardType"},"Protocols/CardType.html#/openLogicChannel()":{"name":"openLogicChannel()","abstract":"<p>Open a new logical channel. The channel is opened issuing a MANAGE CHANNEL command that","parent_name":"CardType"},"Protocols/CardType.html#/transmitControl(command:data:)":{"name":"transmitControl(command:data:)","abstract":"<p>Transmit a control command to the Card/Slot</p>","parent_name":"CardType"},"Protocols/CardType.html#/initialApplicationIdentifier()":{"name":"initialApplicationIdentifier()","abstract":"<p>Provide an initial application identifier of an application on the underlying card (f.e. the root application).</p>","parent_name":"CardType"},"Protocols/CardType.html#/disconnect(reset:)":{"name":"disconnect(reset:)","abstract":"<p>Disconnect connection to the Card.</p>","parent_name":"CardType"},"Protocols/CardChannelType.html#/card":{"name":"card","abstract":"<p>The associated card with this channel","parent_name":"CardChannelType"},"Protocols/CardChannelType.html#/channelNumber":{"name":"channelNumber","abstract":"<p>The channel number</p>","parent_name":"CardChannelType"},"Protocols/CardChannelType.html#/extendedLengthSupported":{"name":"extendedLengthSupported","abstract":"<p>Identify whether a channel supports APDU extended length commands/responses</p>","parent_name":"CardChannelType"},"Protocols/CardChannelType.html#/maxMessageLength":{"name":"maxMessageLength","abstract":"<p>Max length of APDU body in bytes.</p>","parent_name":"CardChannelType"},"Protocols/CardChannelType.html#/maxResponseLength":{"name":"maxResponseLength","abstract":"<p>Max length of a APDU response.</p>","parent_name":"CardChannelType"},"Protocols/CardChannelType.html#/transmit(command:writeTimeout:readTimeout:)":{"name":"transmit(command:writeTimeout:readTimeout:)","abstract":"<p>Transceive a (APDU) command</p>","parent_name":"CardChannelType"},"Protocols/CardChannelType.html#/close()":{"name":"close()","abstract":"<p>Close the channel for subsequent actions.</p>","parent_name":"CardChannelType"},"Protocols/CardChannelType.html":{"name":"CardChannelType","abstract":"<p>General card communications protocol</p>"},"Protocols/CardType.html":{"name":"CardType","abstract":"<p>General card representation</p>"},"Protocols/CommandType.html":{"name":"CommandType","abstract":"<p>SmartCard Application Protocol Data Unit - Command</p>"},"Protocols/ResponseType.html":{"name":"ResponseType","abstract":"<p>SmartCard Application Protocol Data Unit - Response</p>"},"Protocols/ProviderDescriptorType.html":{"name":"ProviderDescriptorType","abstract":"<p>Card Reader Provider information</p>"},"Protocols/CardReaderProviderType.html":{"name":"CardReaderProviderType","abstract":"<p>The <code>CardReaderProviderType</code> protocol serves as the gateway for third-party"},"Protocols/CardReaderControllerDelegate.html":{"name":"CardReaderControllerDelegate","abstract":"<p>Delegate methods for the CardReaderController</p>"},"Protocols/CardReaderControllerType.html":{"name":"CardReaderControllerType","abstract":"<p>Controller representation for managing card readers</p>"},"Protocols/CardReaderType.html":{"name":"CardReaderType","abstract":"<p>General card reader representation.</p>"},"Functions.html#/==(_:_:)":{"name":"==(_:_:)","abstract":"<p><code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/CommandType.html\">CommandType</a></code> adheres to <code>Equatable</code></p>"},"Enums/CardError.html#/securityError(_:)":{"name":"securityError(_:)","abstract":"<p>When a particular action is not allowed</p>","parent_name":"CardError"},"Enums/CardError.html#/connectionError(_:)":{"name":"connectionError(_:)","abstract":"<p>When a connection failed to establish or went away unexpectedly</p>","parent_name":"CardError"},"Enums/CardError.html#/illegalState(_:)":{"name":"illegalState(_:)","abstract":"<p>Upon encountering an illegal/unexpected state for a certain action</p>","parent_name":"CardError"},"Enums/CardError.html#/objcError(_:)":{"name":"objcError(_:)","abstract":"<p>An ObjC NSException was thrown</p>","parent_name":"CardError"},"Enums/CardError.html":{"name":"CardError","abstract":"<p>Error cases for the (Smart)Card domain</p>"},"Classes/CardReaderControllerObjcWrapper.html#/value":{"name":"value","abstract":"<p>The bridged CardReaderController</p>","parent_name":"CardReaderControllerObjcWrapper"},"Classes/CardReaderControllerObjcWrapper.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Initialize the wrapper with the wrapped controller.</p>","parent_name":"CardReaderControllerObjcWrapper"},"Classes/ProviderDescriptor.html#/name":{"name":"name","parent_name":"ProviderDescriptor"},"Classes/ProviderDescriptor.html#/license":{"name":"license","parent_name":"ProviderDescriptor"},"Classes/ProviderDescriptor.html#/providerDescription":{"name":"providerDescription","parent_name":"ProviderDescriptor"},"Classes/ProviderDescriptor.html#/shortDescription":{"name":"shortDescription","parent_name":"ProviderDescriptor"},"Classes/ProviderDescriptor.html#/providerClassName":{"name":"providerClassName","parent_name":"ProviderDescriptor"},"Classes/ProviderDescriptor.html#/init(_:_:_:_:_:)":{"name":"init(_:_:_:_:_:)","parent_name":"ProviderDescriptor"},"Classes/APDU/Command.html#/init(cla:ins:p1:p2:ne:)":{"name":"init(cla:ins:p1:p2:ne:)","abstract":"<p>Constructs a CommandAPDU from the four header bytes.","parent_name":"Command"},"Classes/APDU/Command.html#/init(cla:ins:p1:p2:data:ne:)":{"name":"init(cla:ins:p1:p2:data:ne:)","abstract":"<p>Constructs a CommandAPDU from the four header bytes, command data,","parent_name":"Command"},"Classes/APDU/Command.html#/data":{"name":"data","abstract":"<p>APDU body data</p>","parent_name":"Command"},"Classes/APDU/Command.html#/cla":{"name":"cla","abstract":"<p>APDU class identifier</p>","parent_name":"Command"},"Classes/APDU/Command.html#/ins":{"name":"ins","abstract":"<p>APDU Instruction</p>","parent_name":"Command"},"Classes/APDU/Command.html#/p1":{"name":"p1","abstract":"<p>APDU P1</p>","parent_name":"Command"},"Classes/APDU/Command.html#/p2":{"name":"p2","abstract":"<p>APDU P2</p>","parent_name":"Command"},"Classes/APDU/Command.html#/ne":{"name":"ne","abstract":"<p>APDU Le - Expected length in response body</p>","parent_name":"Command"},"Classes/APDU/Command.html#/nc":{"name":"nc","abstract":"<p>APDU Lc - Command body length</p>","parent_name":"Command"},"Classes/APDU/Command.html#/bytes":{"name":"bytes","abstract":"<p>APDU raw</p>","parent_name":"Command"},"Classes/APDU/Response.html#/init(apdu:)":{"name":"init(apdu:)","abstract":"<p>Initialize APDU response with raw Data.</p>","parent_name":"Response"},"Classes/APDU/Response.html#/OK":{"name":"OK","abstract":"<p>Success response [0x9000]</p>","parent_name":"Response"},"Classes/APDU/Response.html#/init(body:sw1:sw2:)":{"name":"init(body:sw1:sw2:)","abstract":"<p>Convenience initializer for APDU repsonses that come in three parts</p>","parent_name":"Response"},"Classes/APDU/Response.html#/data":{"name":"data","abstract":"<p>The response body</p>","parent_name":"Response"},"Classes/APDU/Response.html#/nr":{"name":"nr","abstract":"<p>The response body length</p>","parent_name":"Response"},"Classes/APDU/Response.html#/sw1":{"name":"sw1","abstract":"<p>The response status word - upper byte</p>","parent_name":"Response"},"Classes/APDU/Response.html#/sw2":{"name":"sw2","abstract":"<p>The response status word - lower byte</p>","parent_name":"Response"},"Classes/APDU/Response.html#/sw":{"name":"sw","abstract":"<p>The response status word</p>","parent_name":"Response"},"Classes/APDU/Error.html#/commandBodyDataTooLarge":{"name":"commandBodyDataTooLarge","abstract":"<p>when the APDU body exceeds 65535</p>","parent_name":"Error"},"Classes/APDU/Error.html#/expectedResponseLengthOutOfBounds":{"name":"expectedResponseLengthOutOfBounds","abstract":"<p>when the expected APDU response length is out of bounds [0, 65536]</p>","parent_name":"Error"},"Classes/APDU/Error.html#/insufficientResponseData(data:)":{"name":"insufficientResponseData(data:)","abstract":"<p>when the APDU response data is not at least two bytes long</p>","parent_name":"Error"},"Classes/APDU/Error.html":{"name":"Error","parent_name":"APDU"},"Classes/APDU.html#/expectedLengthWildcardShort":{"name":"expectedLengthWildcardShort","abstract":"<p>Value for when wildcardShort for expected length encoding is needed</p>","parent_name":"APDU"},"Classes/APDU.html#/expectedLengthWildcardExtended":{"name":"expectedLengthWildcardExtended","abstract":"<p>Value for when wildcardExtended for expected length encoding is needed</p>","parent_name":"APDU"},"Classes/APDU/Response.html":{"name":"Response","abstract":"<p>An  APDU response per ISO/IEC 7816-4. It consists of a conditional body and a two byte trailer.","parent_name":"APDU"},"Classes/APDU/Command.html":{"name":"Command","abstract":"<p>An APDU Command per ISO/IEC 7816-4.","parent_name":"APDU"},"Classes/APDU.html":{"name":"APDU","abstract":"<p>Concrete APDU command + response implementation</p>"},"Classes/ProviderDescriptor.html":{"name":"ProviderDescriptor","abstract":"<p>Default ProviderDescriptor</p>"},"Classes/CardReaderControllerObjcWrapper.html":{"name":"CardReaderControllerObjcWrapper","abstract":"<p>We need to use a wrapper to bridge the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/CardReaderControllerType.html\">CardReaderControllerType</a></code> since its Type cannot be represented in ObjC</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}