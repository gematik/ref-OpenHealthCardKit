{"Typealiases.html#/s:17HealthCardControl20AuthenticationResulta":{"name":"AuthenticationResult","abstract":"<p>The expected result when signing data that can be used to authenticate</p>"},"Typealiases.html#/s:17HealthCardControl22AutCertificateResponsea":{"name":"AutCertificateResponse","abstract":"<p>Alias for the certificate response that holds the raw certificate + the AutCertInfo associated with it.</p>"},"Protocols/SecureMessaging.html#/s:17HealthCardControl15SecureMessagingP7encrypt7command0B17ReaderProviderApi11CommandType_pAfG_p_tKF":{"name":"encrypt(command:)","abstract":"<p>Encrypt the APDU Command.</p>","parent_name":"SecureMessaging"},"Protocols/SecureMessaging.html#/s:17HealthCardControl15SecureMessagingP7decrypt8response0B17ReaderProviderApi12ResponseType_pAfG_p_tKF":{"name":"decrypt(response:)","abstract":"<p>Decrypt the APDU Response.</p>","parent_name":"SecureMessaging"},"Protocols/SecureMessaging.html#/s:17HealthCardControl15SecureMessagingP10invalidateyyF":{"name":"invalidate()","abstract":"<p>Destruct the information held by this object.</p>","parent_name":"SecureMessaging"},"Protocols.html#/s:17HealthCardControl06SecureaB4TypeP":{"name":"SecureHealthCardType","abstract":"<p><code>SecureHealthCardType</code> extends the <code>HealthCardType</code> protocol to indicate that this instance has established"},"Protocols/SecureMessaging.html":{"name":"SecureMessaging","abstract":"<p>Component that attached to a <code>SecureCardChannel</code> takes care of message de-/encryption.</p>"},"Extensions/CardType.html#/s:21CardReaderProviderApi0A4TypeP06HealthA7ControlE17openSecureSession3can12writeTimeout04readM07Combine12AnyPublisherVyAD0ifaE0_ps5Error_pG0fA6Access3CANV_S2dtF":{"name":"openSecureSession(can:writeTimeout:readTimeout:)","abstract":"<p>Open a secure session with a Card for further scheduling/attaching Publisher commands</p>","parent_name":"CardType"},"Extensions/HealthCard/Error.html#/s:16HealthCardAccess0aB0C0aB7ControlE5ErrorO11operationalyA2FmF":{"name":"operational","abstract":"<p>Operational error of the underlying card</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html#/s:16HealthCardAccess0aB0C0aB7ControlE5ErrorO18unexpectedResponseyAfA0G6StatusO_AItcAFmF":{"name":"unexpectedResponse(actual:expected:)","abstract":"<p>Underlying card responds with an unexpected status</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html#/s:16HealthCardAccess0aB0C0aB7ControlE5ErrorO07unknownB4TypeyAfA21ApplicationIdentifierVSg_tcAFmF":{"name":"unknownCardType(aid:)","abstract":"<p>The application identifier was not found or recognized</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html#/s:16HealthCardAccess0aB0C0aB7ControlE5ErrorO17illegalGenerationyAfA0B8Version2V_tcAFmF":{"name":"illegalGeneration(version:)","abstract":"<p>When the CardVersion2 file could not be read/parsed</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html#/s:16HealthCardAccess0aB0C0aB7ControlE5ErrorO011unsupportedB4TypeyA2FmF":{"name":"unsupportedCardType","abstract":"<p>Unsupported card type</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html":{"name":"Error","abstract":"<p>Undocumented</p>","parent_name":"HealthCard"},"Extensions/CardChannelType.html#/s:21CardReaderProviderApi0A11ChannelTypeP06HealthA7ControlE04readaF07cardAid12writeTimeout0iM07Combine12AnyPublisherVy0gA6Access0ga8PropertyF0Os5Error_pGAD0aK0OSg_S2dtF":{"name":"readCardType(cardAid:writeTimeout:readTimeout:)","abstract":"<p>Determine <code>HealthCardPropertyType</code> either by known initialApplicationIdentifier of the <code>CardType</code>","parent_name":"CardChannelType"},"Extensions/HealthCardPropertyType.html#/s:16HealthCardAccess0aB12PropertyTypeO0aB7ControlE11autCertInfoAD03AuthI0OSgvp":{"name":"autCertInfo","abstract":"<p>Return the card&rsquo;s certificate information</p>","parent_name":"HealthCardPropertyType"},"Extensions/HealthCardType.html#/s:16HealthCardAccess0aB4TypeP0aB7ControlE12authenticate9challenge7Combine12AnyPublisherVyAA15CertificateInfoV11certificate_10Foundation4DataV9signaturets5Error_pGAO_tF":{"name":"authenticate(challenge:)","abstract":"<p>Authenticate a challenge on HealthCardType</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/s:16HealthCardAccess0aB4TypeP0aB7ControlE18readAutCertificate7Combine12AnyPublisherVyAD0G8CertInfoO4info_10Foundation4DataV11certificatets5Error_pGyF":{"name":"readAutCertificate()","abstract":"<p>Read the MF/DF.ESIGN.EF.C.CH.AUT.[E256/R2048] certificate from the receiver</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/s:16HealthCardAccess0aB4TypeP0aB7ControlE4sign4data6hasher7Combine12AnyPublisherVyAA0ab8ResponseD0_ps5Error_pG10Foundation4DataV_A2P_AD11AutCertInfoOtctF":{"name":"sign(data:hasher:)","abstract":"<p>Sign a challenge (for example a hash value) for authentication.</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/s:16HealthCardAccess0aB4TypeP0aB7ControlE6verify3pin4type7Combine12AnyPublisherVyAD17VerifyPinResponseOs5Error_pGAA07Format2M0V_AA13EgkFileSystemV0M0OtF":{"name":"verify(pin:type:)","abstract":"<p>Verify Password for a Pin type</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/s:16HealthCardAccess0aB4TypeP0aB7ControlE16readSelectedFile8expected011failOnEndOfH7Warning6offset7Combine12AnyPublisherVy10Foundation4DataVs5Error_pGSiSg_SbSitF":{"name":"readSelectedFile(expected:failOnEndOfFileWarning:offset:)","abstract":"<p>Read the current selected DF/EF File</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/s:16HealthCardAccess0aB4TypeP0aB7ControlE15selectDedicated4file3fcp6length7Combine12AnyPublisherVyAA14ResponseStatusO_AA04FileE9ParameterVSgts5Error_pGAA0gP0V_SbSitF":{"name":"selectDedicated(file:fcp:length:)","abstract":"<p>Select a dedicated file with or without requesting the FileIdentifier&rsquo;s File Control Parameter.</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html":{"name":"HealthCardType"},"Extensions/HealthCardPropertyType.html":{"name":"HealthCardPropertyType"},"Extensions/CardChannelType.html":{"name":"CardChannelType"},"Extensions/HealthCard.html":{"name":"HealthCard"},"Extensions/CardType.html":{"name":"CardType","abstract":"<p>Extensions on CardType to negotiate a PACE session key for further secure</p>"},"Enums/SelectError.html#/s:17HealthCardControl11SelectErrorO08failedToD3AidyAC0aB6Access21ApplicationIdentifierV_AE14ResponseStatusOSgtcACmF":{"name":"failedToSelectAid(_:status:)","abstract":"<p>Undocumented</p>","parent_name":"SelectError"},"Enums/SelectError.html#/s:17HealthCardControl11SelectErrorO08failedToD3FidyAC0aB6Access14FileIdentifierV_AE14ResponseStatusOSgtcACmF":{"name":"failedToSelectFid(_:status:)","abstract":"<p>Undocumented</p>","parent_name":"SelectError"},"Enums/ReadError.html#/s:17HealthCardControl9ReadErrorO18unexpectedResponseyAC0aB6Access0G6StatusO_tcACmF":{"name":"unexpectedResponse(state:)","abstract":"<p>The response status did not match the expected response status</p>","parent_name":"ReadError"},"Enums/ReadError.html#/s:17HealthCardControl9ReadErrorO6noDatayAC0aB6Access14ResponseStatusO_tcACmF":{"name":"noData(state:)","abstract":"<p>No data has been returned</p>","parent_name":"ReadError"},"Enums/ReadError.html#/s:17HealthCardControl9ReadErrorO010fcpMissingD4SizeyAC0aB6Access14ResponseStatusO_tcACmF":{"name":"fcpMissingReadSize(state:)","abstract":"<p>Undocumented</p>","parent_name":"ReadError"},"Enums/CardAid.html#/s:17HealthCardControl0B3AidO3egkyA2CmF":{"name":"egk","abstract":"<p>Undocumented</p>","parent_name":"CardAid"},"Enums/CardAid.html#/s:17HealthCardControl0B3AidO3hbayA2CmF":{"name":"hba","abstract":"<p>Undocumented</p>","parent_name":"CardAid"},"Enums/CardAid.html#/s:17HealthCardControl0B3AidO4smcbyA2CmF":{"name":"smcb","abstract":"<p>Undocumented</p>","parent_name":"CardAid"},"Enums/VerifyPinResponse.html#/s:17HealthCardControl17VerifyPinResponseO7successyA2CmF":{"name":"success","abstract":"<p>Pin verification succeeded</p>","parent_name":"VerifyPinResponse"},"Enums/VerifyPinResponse.html#/s:17HealthCardControl17VerifyPinResponseO6failedyACSi_tcACmF":{"name":"failed(retryCount:)","abstract":"<p>Pin verification failed, retry count is the number of retries left for the given <code>EgkFileSystem.Pin</code> type</p>","parent_name":"VerifyPinResponse"},"Enums/AutCertInfo.html#/s:17HealthCardControl11AutCertInfoO02efD5R2048yA2CmF":{"name":"efAutR2048","abstract":"<p>eGK2 ESign certificate</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/s:17HealthCardControl11AutCertInfoO02efD4E256yA2CmF":{"name":"efAutE256","abstract":"<p>eGK2.1 ESign certificate</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/s:17HealthCardControl11AutCertInfoO5eSign0aB6Access21ApplicationIdentifierVvp":{"name":"eSign","abstract":"<p>The ESIGN file location on the card</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/s:17HealthCardControl11AutCertInfoO11certificate0aB6Access13DedicatedFileVvp":{"name":"certificate","abstract":"<p>The certificate file location on the card</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/s:17HealthCardControl11AutCertInfoO9algorithm0aB6Access12PSOAlgorithmOvp":{"name":"algorithm","abstract":"<p>The associated signing algorithm for the certificate type</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/s:17HealthCardControl11AutCertInfoO3key0aB6Access3KeyVvp":{"name":"key","abstract":"<p>The associated key for signing</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/s:17HealthCardControl11AutCertInfoO19signatureHashMethody10Foundation4DataVAGcvp":{"name":"signatureHashMethod","abstract":"<p>Return the authentication signature digest method</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html":{"name":"AutCertInfo","abstract":"<p>MF/DF.ESIGN.EF.C.CH.AUT type</p>"},"Enums/VerifyPinResponse.html":{"name":"VerifyPinResponse","abstract":"<p>Response to a Verify Pin command on a HealthCard</p>"},"Enums/CardAid.html":{"name":"CardAid","abstract":"<p><code>ApplicationIdentifier</code> of the application the card is initialised with</p>"},"Enums/ReadError.html":{"name":"ReadError","abstract":"<p>Domain error cases for Reading files from a <code>HealthCardType</code> e.g. <code>CardChannelType</code></p>"},"Enums/SelectError.html":{"name":"SelectError","abstract":"<p>Undocumented</p>"},"Classes/KeyAgreement/Algorithm.html#/s:17HealthCardControl12KeyAgreementC9AlgorithmO25idPaceEcdhGmAesCbcCmac128yA2EmF":{"name":"idPaceEcdhGmAesCbcCmac128","abstract":"<p>id-PACE-ECDH-GM-AES-CBC-CMAC-128</p>","parent_name":"Algorithm"},"Classes/KeyAgreement/Algorithm.html#/s:17HealthCardControl12KeyAgreementC9AlgorithmO016negotiateSessionD04card3can12writeTimeout04readL07Combine12AnyPublisherVyAA15SecureMessaging_ps5Error_pG0aB6Access0aB4Type_p_AQ3CANVS2dtF":{"name":"negotiateSessionKey(card:can:writeTimeout:readTimeout:)","abstract":"<p>Negotiate a common key with a <code>HealthCard</code> given its <code>CardAccessNumber</code></p>","parent_name":"Algorithm"},"Classes/KeyAgreement/Error.html#/s:17HealthCardControl12KeyAgreementC5ErrorO15illegalArgumentyA2EmF":{"name":"illegalArgument","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:17HealthCardControl12KeyAgreementC5ErrorO026unexpectedFormedAnswerFromB0yA2EmF":{"name":"unexpectedFormedAnswerFromCard","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:17HealthCardControl12KeyAgreementC5ErrorO31resultOfEcArithmeticWasInfiniteyA2EmF":{"name":"resultOfEcArithmeticWasInfinite","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:17HealthCardControl12KeyAgreementC5ErrorO026macPcdVerificationFailedOnB0yA2EmF":{"name":"macPcdVerificationFailedOnCard","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:17HealthCardControl12KeyAgreementC5ErrorO32macPiccVerificationFailedLocallyyA2EmF":{"name":"macPiccVerificationFailedLocally","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:17HealthCardControl12KeyAgreementC5ErrorO07noValidaB6StatusyA2EmF":{"name":"noValidHealthCardStatus","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:17HealthCardControl12KeyAgreementC5ErrorO02efB18AccessNotAvailableyA2EmF":{"name":"efCardAccessNotAvailable","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:17HealthCardControl12KeyAgreementC5ErrorO011unsupporteddE9AlgorithmyAE7ASN1Kit16ObjectIdentifierVcAEmF":{"name":"unsupportedKeyAgreementAlgorithm(_:)","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html":{"name":"Error","abstract":"<p>Undocumented</p>","parent_name":"KeyAgreement"},"Classes/KeyAgreement/Algorithm.html":{"name":"Algorithm","abstract":"<p>Algorithm the PACE key agreement negotiation is based on.</p>","parent_name":"KeyAgreement"},"Classes/KeyDerivationFunction/Mode.html#/s:17HealthCardControl21KeyDerivationFunctionC4ModeO3encyA2EmF":{"name":"enc","abstract":"<p>Mode key derivation for encoding</p>","parent_name":"Mode"},"Classes/KeyDerivationFunction/Mode.html#/s:17HealthCardControl21KeyDerivationFunctionC4ModeO3macyA2EmF":{"name":"mac","abstract":"<p>Mode key derivation for MAC calculation</p>","parent_name":"Mode"},"Classes/KeyDerivationFunction/Mode.html#/s:17HealthCardControl21KeyDerivationFunctionC4ModeO8passwordyA2EmF":{"name":"password","abstract":"<p>Mode key derivation for password</p>","parent_name":"Mode"},"Classes/KeyDerivationFunction/KeyFuncType.html#/s:17HealthCardControl21KeyDerivationFunctionC0D8FuncTypeO6aes128yA2EmF":{"name":"aes128","abstract":"<p>Target function of family AES128</p>","parent_name":"KeyFuncType"},"Classes/KeyDerivationFunction/KeyFuncType.html":{"name":"KeyFuncType","abstract":"<p>Type of en-/decryption function</p>","parent_name":"KeyDerivationFunction"},"Classes/KeyDerivationFunction/Mode.html":{"name":"Mode","abstract":"<p>Mode of use of derived key</p>","parent_name":"KeyDerivationFunction"},"Classes/KeyDerivationFunction.html#/s:17HealthCardControl21KeyDerivationFunctionC06deriveD04from8funcType4mode10Foundation4DataVAJ_AC0d4FuncJ0OAC4ModeOtFZ":{"name":"deriveKey(from:funcType:mode:)","abstract":"<p>Derives a key from a (shared) secret.","parent_name":"KeyDerivationFunction"},"Classes/KeyDerivationFunction.html":{"name":"KeyDerivationFunction","abstract":"<p>This class provides functionality to derive (de-/ encryption) keys from given data.</p>"},"Classes/KeyAgreement.html":{"name":"KeyAgreement","abstract":"<p>Holds functionality to negotiate a common key with a given <code>HealthCard</code> and a <code>CardAccessNumber</code>.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}