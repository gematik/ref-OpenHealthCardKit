{"Typealiases.html#/AuthenticationResult":{"name":"AuthenticationResult","abstract":"<p>The expected result when signing data that can be used to authenticate</p>"},"Typealiases.html#/AutCertificateResponse":{"name":"AutCertificateResponse","abstract":"<p>Alias for the certificate response that holds the raw certificate + the AutCertInfo associated with it.</p>"},"Protocols/SecureMessaging.html#/encrypt(command:)":{"name":"encrypt(command:)","abstract":"<p>Encrypt the APDU Command.</p>","parent_name":"SecureMessaging"},"Protocols/SecureMessaging.html#/decrypt(response:)":{"name":"decrypt(response:)","abstract":"<p>Decrypt the APDU Response.</p>","parent_name":"SecureMessaging"},"Protocols/SecureMessaging.html#/invalidate()":{"name":"invalidate()","abstract":"<p>Destruct the information held by this object.</p>","parent_name":"SecureMessaging"},"Protocols.html#/SecureHealthCardType":{"name":"SecureHealthCardType","abstract":"<p><code>SecureHealthCardType</code> extends the <code>HealthCardType</code> protocol to indicate that this instance has established"},"Protocols/SecureMessaging.html":{"name":"SecureMessaging","abstract":"<p>Component that attached to a <code>SecureCardChannel</code> takes care of message de-/encryption.</p>"},"Extensions/CardType.html#/openSecureSession(can:writeTimeout:readTimeout:)":{"name":"openSecureSession(can:writeTimeout:readTimeout:)","abstract":"<p>Open a secure session with a Card for further scheduling/attaching Publisher commands</p>","parent_name":"CardType"},"Extensions/HealthCard/Error.html#/operational":{"name":"operational","abstract":"<p>Operational error of the underlying card</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html#/unexpectedResponse(actual:expected:)":{"name":"unexpectedResponse(actual:expected:)","abstract":"<p>Underlying card responds with an unexpected status</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html#/unknownCardType(aid:)":{"name":"unknownCardType(aid:)","abstract":"<p>The application identifier was not found or recognized</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html#/illegalGeneration(version:)":{"name":"illegalGeneration(version:)","abstract":"<p>When the CardVersion2 file could not be read/parsed</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html#/unsupportedCardType":{"name":"unsupportedCardType","abstract":"<p>Unsupported card type</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html":{"name":"Error","parent_name":"HealthCard"},"Extensions/CardChannelType.html#/readCardType(cardAid:writeTimeout:readTimeout:)":{"name":"readCardType(cardAid:writeTimeout:readTimeout:)","abstract":"<p>Determine <code>HealthCardPropertyType</code> either by known initialApplicationIdentifier of the <code>CardType</code>","parent_name":"CardChannelType"},"Extensions/HealthCardPropertyType.html#/autCertInfo":{"name":"autCertInfo","abstract":"<p>Return the card&rsquo;s certificate information</p>","parent_name":"HealthCardPropertyType"},"Extensions/HealthCardType.html#/authenticate(challenge:)":{"name":"authenticate(challenge:)","abstract":"<p>Authenticate a challenge on HealthCardType</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/changeReferenceDataSetNewPin(old:new:type:dfSpecific:)":{"name":"changeReferenceDataSetNewPin(old:new:type:dfSpecific:)","abstract":"<p>Assign a new secret (value) to a password.</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/changeReferenceDataSetNewPin(old:new:affectedPassword:)":{"name":"changeReferenceDataSetNewPin(old:new:affectedPassword:)","abstract":"<p>Assign a new secret (value) to a password.</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/readAutCertificate()":{"name":"readAutCertificate()","abstract":"<p>Read the MF/DF.ESIGN.EF.C.CH.AUT.[E256/R2048] certificate from the receiver</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/sign(data:hasher:)":{"name":"sign(data:hasher:)","abstract":"<p>Sign a challenge (for example a hash value) for authentication.</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/resetRetryCounter(puk:type:dfSpecific:)":{"name":"resetRetryCounter(puk:type:dfSpecific:)","abstract":"<p>Reset the retry counter of a password object to its start value.</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/resetRetryCounter(puk:affectedPassWord:)":{"name":"resetRetryCounter(puk:affectedPassWord:)","abstract":"<p>Reset the retry counter of a password object to its start value.</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/resetRetryCounterAndSetNewPin(puk:newPin:type:dfSpecific:)":{"name":"resetRetryCounterAndSetNewPin(puk:newPin:type:dfSpecific:)","abstract":"<p>Reset the retry counter of a password object to its start value while assigning a new secret.</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/resetRetryCounterAndSetNewPin(puk:newPin:affectedPassWord:)":{"name":"resetRetryCounterAndSetNewPin(puk:newPin:affectedPassWord:)","abstract":"<p>Reset the retry counter of a password object to its start value while assigning a new secret.</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/verify(pin:type:dfSpecific:)":{"name":"verify(pin:type:dfSpecific:)","abstract":"<p>Verify Password for a Pin type</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/verify(pin:affectedPassword:)":{"name":"verify(pin:affectedPassword:)","abstract":"<p>Verify Password for a Pin type</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/readSelectedFile(expected:failOnEndOfFileWarning:offset:)":{"name":"readSelectedFile(expected:failOnEndOfFileWarning:offset:)","abstract":"<p>Read the current selected DF/EF File</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/selectDedicated(file:fcp:length:)":{"name":"selectDedicated(file:fcp:length:)","abstract":"<p>Select a dedicated file with or without requesting the FileIdentifier&rsquo;s File Control Parameter.</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html":{"name":"HealthCardType"},"Extensions/HealthCardPropertyType.html":{"name":"HealthCardPropertyType"},"Extensions/CardChannelType.html":{"name":"CardChannelType"},"Extensions/HealthCard.html":{"name":"HealthCard"},"Extensions/CardType.html":{"name":"CardType","abstract":"<p>Extensions on CardType to negotiate a PACE session key for further secure</p>"},"Enums/KeyAgreement/Algorithm.html#/idPaceEcdhGmAesCbcCmac128":{"name":"idPaceEcdhGmAesCbcCmac128","abstract":"<p>id-PACE-ECDH-GM-AES-CBC-CMAC-128</p>","parent_name":"Algorithm"},"Enums/KeyAgreement/Algorithm.html#/negotiateSessionKey(card:can:writeTimeout:readTimeout:)":{"name":"negotiateSessionKey(card:can:writeTimeout:readTimeout:)","abstract":"<p>Negotiate a common key with a <code>HealthCard</code> given its <code>CardAccessNumber</code></p>","parent_name":"Algorithm"},"Enums/KeyAgreement/Error.html#/illegalArgument":{"name":"illegalArgument","parent_name":"Error"},"Enums/KeyAgreement/Error.html#/unexpectedFormedAnswerFromCard":{"name":"unexpectedFormedAnswerFromCard","parent_name":"Error"},"Enums/KeyAgreement/Error.html#/resultOfEcArithmeticWasInfinite":{"name":"resultOfEcArithmeticWasInfinite","parent_name":"Error"},"Enums/KeyAgreement/Error.html#/macPcdVerificationFailedOnCard":{"name":"macPcdVerificationFailedOnCard","parent_name":"Error"},"Enums/KeyAgreement/Error.html#/macPiccVerificationFailedLocally":{"name":"macPiccVerificationFailedLocally","parent_name":"Error"},"Enums/KeyAgreement/Error.html#/noValidHealthCardStatus":{"name":"noValidHealthCardStatus","parent_name":"Error"},"Enums/KeyAgreement/Error.html#/efCardAccessNotAvailable":{"name":"efCardAccessNotAvailable","parent_name":"Error"},"Enums/KeyAgreement/Error.html#/unsupportedKeyAgreementAlgorithm(_:)":{"name":"unsupportedKeyAgreementAlgorithm(_:)","parent_name":"Error"},"Enums/KeyAgreement/Error.html":{"name":"Error","parent_name":"KeyAgreement"},"Enums/KeyAgreement/Algorithm.html":{"name":"Algorithm","abstract":"<p>Algorithm the PACE key agreement negotiation is based on.</p>","parent_name":"KeyAgreement"},"Enums/SelectError.html#/failedToSelectAid(_:status:)":{"name":"failedToSelectAid(_:status:)","parent_name":"SelectError"},"Enums/SelectError.html#/failedToSelectFid(_:status:)":{"name":"failedToSelectFid(_:status:)","parent_name":"SelectError"},"Enums/ReadError.html#/unexpectedResponse(state:)":{"name":"unexpectedResponse(state:)","abstract":"<p>The response status did not match the expected response status</p>","parent_name":"ReadError"},"Enums/ReadError.html#/noData(state:)":{"name":"noData(state:)","abstract":"<p>No data has been returned</p>","parent_name":"ReadError"},"Enums/ReadError.html#/fcpMissingReadSize(state:)":{"name":"fcpMissingReadSize(state:)","parent_name":"ReadError"},"Enums/CardAid.html#/egk":{"name":"egk","parent_name":"CardAid"},"Enums/CardAid.html#/hba":{"name":"hba","parent_name":"CardAid"},"Enums/CardAid.html#/smcb":{"name":"smcb","parent_name":"CardAid"},"Enums/KeyDerivationFunction/Mode.html#/enc":{"name":"enc","abstract":"<p>Mode key derivation for encoding</p>","parent_name":"Mode"},"Enums/KeyDerivationFunction/Mode.html#/mac":{"name":"mac","abstract":"<p>Mode key derivation for MAC calculation</p>","parent_name":"Mode"},"Enums/KeyDerivationFunction/Mode.html#/password":{"name":"password","abstract":"<p>Mode key derivation for password</p>","parent_name":"Mode"},"Enums/KeyDerivationFunction/KeyFuncType.html#/aes128":{"name":"aes128","abstract":"<p>Target function of family AES128</p>","parent_name":"KeyFuncType"},"Enums/KeyDerivationFunction/KeyFuncType.html":{"name":"KeyFuncType","abstract":"<p>Type of en-/decryption function</p>","parent_name":"KeyDerivationFunction"},"Enums/KeyDerivationFunction/Mode.html":{"name":"Mode","abstract":"<p>Mode of use of derived key</p>","parent_name":"KeyDerivationFunction"},"Enums/KeyDerivationFunction.html#/deriveKey(from:funcType:mode:)":{"name":"deriveKey(from:funcType:mode:)","abstract":"<p>Derives a key from a (shared) secret.","parent_name":"KeyDerivationFunction"},"Enums/VerifyPinAffectedPassword.html#/mrPinHomeNoDfSpecific":{"name":"mrPinHomeNoDfSpecific","abstract":"<p>MR.PIN HOME in non-df-specific context</p>","parent_name":"VerifyPinAffectedPassword"},"Enums/VerifyPinResponse.html#/success":{"name":"success","abstract":"<p>Pin verification succeeded</p>","parent_name":"VerifyPinResponse"},"Enums/VerifyPinResponse.html#/wrongSecretWarning(retryCount:)":{"name":"wrongSecretWarning(retryCount:)","abstract":"<p>Pin verification failed, retry count is the number of retries left for the given <code>EgkFileSystem.Pin</code> type</p>","parent_name":"VerifyPinResponse"},"Enums/VerifyPinResponse.html#/securityStatusNotSatisfied":{"name":"securityStatusNotSatisfied","abstract":"<p>Access rule evaluation failure</p>","parent_name":"VerifyPinResponse"},"Enums/VerifyPinResponse.html#/memoryFailure":{"name":"memoryFailure","abstract":"<p>Write action unsuccessful</p>","parent_name":"VerifyPinResponse"},"Enums/VerifyPinResponse.html#/passwordBlocked":{"name":"passwordBlocked","abstract":"<p>Exhausted retry counter</p>","parent_name":"VerifyPinResponse"},"Enums/VerifyPinResponse.html#/passwordNotUsable":{"name":"passwordNotUsable","abstract":"<p>Password is transport protected</p>","parent_name":"VerifyPinResponse"},"Enums/VerifyPinResponse.html#/passwordNotFound":{"name":"passwordNotFound","abstract":"<p>Referenced password could not be found</p>","parent_name":"VerifyPinResponse"},"Enums/VerifyPinResponse.html#/unknownFailure":{"name":"unknownFailure","abstract":"<p>Any (unexpected) error not specified in gemSpec_COS 14.6.6.2</p>","parent_name":"VerifyPinResponse"},"Enums/ResetRetryCounterAffectedPassword.html#/mrPinHomeNoDfSpecific":{"name":"mrPinHomeNoDfSpecific","abstract":"<p>MR.PIN HOME in non-df-specific context</p>","parent_name":"ResetRetryCounterAffectedPassword"},"Enums/ResetRetryCounterResponse.html#/success":{"name":"success","abstract":"<p>Reset successful</p>","parent_name":"ResetRetryCounterResponse"},"Enums/ResetRetryCounterResponse.html#/wrongSecretWarning(retryCount:)":{"name":"wrongSecretWarning(retryCount:)","abstract":"<p>Reset failed, retry count is the number of retries left for the given <code>EgkFileSystem.Pin</code> type&rsquo;s PUK</p>","parent_name":"ResetRetryCounterResponse"},"Enums/ResetRetryCounterResponse.html#/securityStatusNotSatisfied":{"name":"securityStatusNotSatisfied","abstract":"<p>Access rule evaluation failure</p>","parent_name":"ResetRetryCounterResponse"},"Enums/ResetRetryCounterResponse.html#/memoryFailure":{"name":"memoryFailure","abstract":"<p>Write action unsuccessful</p>","parent_name":"ResetRetryCounterResponse"},"Enums/ResetRetryCounterResponse.html#/commandBlocked":{"name":"commandBlocked","abstract":"<p>Counter for PUK is already blocked (cannot be reset)</p>","parent_name":"ResetRetryCounterResponse"},"Enums/ResetRetryCounterResponse.html#/wrongPasswordLength":{"name":"wrongPasswordLength","abstract":"<p>New password is either too long or too short</p>","parent_name":"ResetRetryCounterResponse"},"Enums/ResetRetryCounterResponse.html#/passwordNotFound":{"name":"passwordNotFound","abstract":"<p>Referenced password could not be found</p>","parent_name":"ResetRetryCounterResponse"},"Enums/ResetRetryCounterResponse.html#/unknownFailure":{"name":"unknownFailure","abstract":"<p>Any (unexpected) error not specified in gemSpec_COS 14.6.5.5</p>","parent_name":"ResetRetryCounterResponse"},"Enums/AutCertInfo.html#/efAutR2048":{"name":"efAutR2048","abstract":"<p>eGK2 ESign certificate</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/efAutE256":{"name":"efAutE256","abstract":"<p>eGK2.1 ESign certificate</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/eSign":{"name":"eSign","abstract":"<p>The ESIGN file location on the card</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/certificate":{"name":"certificate","abstract":"<p>The certificate file location on the card</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/algorithm":{"name":"algorithm","abstract":"<p>The associated signing algorithm for the certificate type</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/key":{"name":"key","abstract":"<p>The associated key for signing</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/signatureHashMethod":{"name":"signatureHashMethod","abstract":"<p>Return the authentication signature digest method</p>","parent_name":"AutCertInfo"},"Enums/ChangeReferenceDataAffectedPassword.html#/mrPinHomeNoDfSpecific":{"name":"mrPinHomeNoDfSpecific","abstract":"<p>MR.PIN HOME in non-df-specific context</p>","parent_name":"ChangeReferenceDataAffectedPassword"},"Enums/ChangeReferenceDataResponse.html#/success":{"name":"success","abstract":"<p>Reset successful</p>","parent_name":"ChangeReferenceDataResponse"},"Enums/ChangeReferenceDataResponse.html#/wrongSecretWarning(retryCount:)":{"name":"wrongSecretWarning(retryCount:)","abstract":"<p>Reset failed, retry count is the number of retries left for the given <code>EgkFileSystem.Pin</code> type</p>","parent_name":"ChangeReferenceDataResponse"},"Enums/ChangeReferenceDataResponse.html#/securityStatusNotSatisfied":{"name":"securityStatusNotSatisfied","abstract":"<p>Access rule evaluation failure</p>","parent_name":"ChangeReferenceDataResponse"},"Enums/ChangeReferenceDataResponse.html#/memoryFailure":{"name":"memoryFailure","abstract":"<p>Write action unsuccessful</p>","parent_name":"ChangeReferenceDataResponse"},"Enums/ChangeReferenceDataResponse.html#/commandBlocked":{"name":"commandBlocked","abstract":"<p>Counter for PUK is already blocked (cannot be reset)</p>","parent_name":"ChangeReferenceDataResponse"},"Enums/ChangeReferenceDataResponse.html#/wrongPasswordLength":{"name":"wrongPasswordLength","abstract":"<p>New password is either too long or too short</p>","parent_name":"ChangeReferenceDataResponse"},"Enums/ChangeReferenceDataResponse.html#/passwordNotFound":{"name":"passwordNotFound","abstract":"<p>Referenced password could not be found</p>","parent_name":"ChangeReferenceDataResponse"},"Enums/ChangeReferenceDataResponse.html#/unknownFailure":{"name":"unknownFailure","abstract":"<p>Any (unexpected) error not specified in gemSpec_COS 14.6.1.3</p>","parent_name":"ChangeReferenceDataResponse"},"Enums/ChangeReferenceDataResponse.html":{"name":"ChangeReferenceDataResponse"},"Enums/ChangeReferenceDataAffectedPassword.html":{"name":"ChangeReferenceDataAffectedPassword","abstract":"<p>Convenience password reference selector</p>"},"Enums/AutCertInfo.html":{"name":"AutCertInfo","abstract":"<p>MF/DF.ESIGN.EF.C.CH.AUT type</p>"},"Enums/ResetRetryCounterResponse.html":{"name":"ResetRetryCounterResponse"},"Enums/ResetRetryCounterAffectedPassword.html":{"name":"ResetRetryCounterAffectedPassword","abstract":"<p>Convenience password reference selector</p>"},"Enums/VerifyPinResponse.html":{"name":"VerifyPinResponse","abstract":"<p>Response to a Verify Pin command on a HealthCard</p>"},"Enums/VerifyPinAffectedPassword.html":{"name":"VerifyPinAffectedPassword","abstract":"<p>Convenience password reference selector</p>"},"Enums/KeyDerivationFunction.html":{"name":"KeyDerivationFunction","abstract":"<p>This class provides functionality to derive (de-/ encryption) keys from given data.</p>"},"Enums/CardAid.html":{"name":"CardAid","abstract":"<p><code>ApplicationIdentifier</code> of the application the card is initialised with</p>"},"Enums/ReadError.html":{"name":"ReadError","abstract":"<p>Domain error cases for Reading files from a <code>HealthCardType</code> e.g. <code>CardChannelType</code></p>"},"Enums/SelectError.html":{"name":"SelectError"},"Enums/KeyAgreement.html":{"name":"KeyAgreement","abstract":"<p>Holds functionality to negotiate a common key with a given <code>HealthCard</code> and a <code>CardAccessNumber</code>.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}